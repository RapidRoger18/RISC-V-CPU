
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
000000d7 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
000000d7  w      .debug_info	00000000 .hidden fibonacci.c.1c7282e0
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000000d8 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000000d0 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000118 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000000fc g     F .text	0000001c memset
00000054 g     F .text	0000007c main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000118 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    11800593          	addi	x11,x0,280
  1c:	    00000613          	addi	x12,x0,0
  20:	    0b8000ef          	jal	x1,d8 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    0c8000ef          	jal	x1,fc <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    090000ef          	jal	x1,d0 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ### 
     ###         #define final_location (* (volatile uint8_t * ) 0x02000004)
     ###         #define CPU_DONE (* (volatile uint8_t * ) 0x0200000c)
     ###         
     ###     #endif
     ###     uint8_t k = 0;
  54:	          00000793          	addi	x15,x0,0
     ###         for (uint8_t i = 0; i < 10; i++) {
     ### 
     ###             c = a + b;
     ###             a = b;
     ###             b = c;
     ###             elements[k] = a;
  58:	          020006b7          	lui	x13,0x2000
     ###     for (uint8_t j = 0; j < 15; j++){
  5c:	          09600513          	addi	x10,x0,150
     ###         for (uint8_t i = 0; i < 10; i++) {
  60:	/-------> 00a78613          	addi	x12,x15,10
     ###         uint8_t b = 1;
  64:	|         00100593          	addi	x11,x0,1
     ###         uint8_t a = 0;
  68:	|         00000713          	addi	x14,x0,0
  6c:	|         0ff67613          	andi	x12,x12,255
  70:	|     /-- 0080006f          	jal	x0,78 <main+0x24>
     ###             b = c;
  74:	|  /--|-> 00088593          	addi	x11,x17,0
     ###             c = a + b;
  78:	|  |  \-> 00b70733          	add	x14,x14,x11
     ###             elements[k] = a;
  7c:	|  |      00f68833          	add	x16,x13,x15
     ###             c = a + b;
  80:	|  |      0ff77893          	andi	x17,x14,255
     ###             k++;
  84:	|  |      00178713          	addi	x14,x15,1
  88:	|  |      0ff77793          	andi	x15,x14,255
     ###             elements[k] = a;
  8c:	|  |      00b80823          	sb	x11,16(x16)
     ###         for (uint8_t i = 0; i < 10; i++) {
  90:	|  |      00058713          	addi	x14,x11,0
  94:	|  \----- fef610e3          	bne	x12,x15,74 <main+0x20>
     ###     for (uint8_t j = 0; j < 15; j++){
  98:	|     /-- 00a60663          	beq	x12,x10,a4 <main+0x50>
  9c:	|     |   00060793          	addi	x15,x12,0
  a0:	\-----|-- fc1ff06f          	jal	x0,60 <main+0xc>
     ###         //     mem_ptr+=0x1;
     ###         //     index++;
     ###         // }
     ###     #endif
     ###     for (int i = 0; i < n; ++i) {
     ###         final_location = elements[i];
  a4:	      \-> 02000737          	lui	x14,0x2000
     ###     for (uint8_t j = 0; j < 15; j++){
  a8:	          01068793          	addi	x15,x13,16 # 2000010 <__bss_end+0x10>
     ###     for (int i = 0; i < n; ++i) {
  ac:	          0a670693          	addi	x13,x14,166 # 20000a6 <__bss_end+0xa6>
     ###         final_location = elements[i];
  b0:	      /-> 0007c603          	lbu	x12,0(x15)
     ###     for (int i = 0; i < n; ++i) {
  b4:	      |   00178793          	addi	x15,x15,1
     ###         final_location = elements[i];
  b8:	      |   00c70223          	sb	x12,4(x14)
     ###     for (int i = 0; i < n; ++i) {
  bc:	      \-- fed79ae3          	bne	x15,x13,b0 <main+0x5c>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
  c0:	          00100793          	addi	x15,x0,1
  c4:	          00f70623          	sb	x15,12(x14)
     ###         _put_value(CPU_DONE);
     ###         _put_byte('\n');
     ###     #endif
     ### 
     ###     return 0;
  c8:	          00000513          	addi	x10,x0,0
  cc:	          00008067          	jalr	x0,0(x1)

000000d0 <_set_tls>:
  d0:	00050213          	addi	x4,x10,0
  d4:	00008067          	jalr	x0,0(x1)

000000d8 <memcpy>:
  d8:	       00050313          	addi	x6,x10,0
  dc:	/----- 00060e63          	beq	x12,x0,f8 <memcpy+0x20>
  e0:	|  /-> 00058383          	lb	x7,0(x11)
  e4:	|  |   00730023          	sb	x7,0(x6)
  e8:	|  |   fff60613          	addi	x12,x12,-1
  ec:	|  |   00130313          	addi	x6,x6,1
  f0:	|  |   00158593          	addi	x11,x11,1
  f4:	|  \-- fe0616e3          	bne	x12,x0,e0 <memcpy+0x8>
  f8:	\----> 00008067          	jalr	x0,0(x1)

000000fc <memset>:
  fc:	       00050313          	addi	x6,x10,0
 100:	/----- 00060a63          	beq	x12,x0,114 <__ram_size+0x14>
 104:	|  /-> 00b30023          	sb	x11,0(x6)
 108:	|  |   fff60613          	addi	x12,x12,-1
 10c:	|  |   00130313          	addi	x6,x6,1
 110:	|  \-- fe061ae3          	bne	x12,x0,104 <__ram_size+0x4>
 114:	\----> 00008067          	jalr	x0,0(x1)
